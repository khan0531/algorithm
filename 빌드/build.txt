#include <Keyboard.h>


extern unsigned long timer0_millis;
int attack_key = 0;
int key[6] = {0x80, '4', '5', '1', '2', '3'};
int skillA = 0;
int skillB = 0;
int skillC = 0;
int skillD = 0;
int skillE = 0;
int skillF = 0;
int skillG = 0;
int skillH = 0;
int skillI = 0;
int skillJ = 0;
int delay1_1 = 555;
int delay1_2 = 580;


void setup() {
  Serial.begin(9600);
  Keyboard.begin();
  delay(random(500, 1000));
  randomSeed(analogRead(A0));
}

void loop() { // 아두이노 메인 루프 함수

  int X = random(0, 2);

  if ( X == 0 ) {

    build_1();

  }
  else if ( X == 1) {

    build_2();

  }


}

void build_1() {
  left();

  jumpattack_1();
  skillAll_3();
  jumpattack();
  skillAll_5();
  jumpattack_2();
  skillAll_1();
  jumpattack_1();

  up_transition();
  delay (random(400, 450));
  skillAll_2();
  right();

  jumpattack_2();
  skillAll_2();
  jumpattack_2();
  skillAll_5();
  jumpattack_3();
  skillAll();
  jumpattack();
  jumpattack_2();
  delay (random(400, 450));


  int a = random(0, 3);
  if (a == 0) {
    delay (random(300, 350));
  }
  if (a == 1) {
    delay (random(300, 350));
  }
  if (a == 2) {
    jumpattack_2();
  }
}

void build_2() {
  left();

  jumpattack_1();
  skillAll_1();
  jumpattack();
  jumpattack_2();
  skillAll_3();
  jumpattack_1();

  up_transition();
  delay (random(400, 450));
  skillAll_2();
  right();

  jumpattack_2();
  skillAll_2();
  jumpattack_2();
  skillAll_5();
  jumpattack_3();
  jumpattack();
  jumpattack_2();
  delay (random(400, 450));


  int a = random(0, 3);
  if (a == 0) {
    delay (random(300, 350));
  }
  if (a == 1) {
    delay (random(300, 350));
  }
  if (a == 2) {
    jumpattack_2();

  }
}

void timecheck() {

  unsigned long realtime = millis();

  int coolcheak = (realtime / 1000);

  if (coolcheak >= 1)
  {

    timer0_millis = 0;

    skillA += realtime / 1000 ;

    skillB += realtime / 1000 ;

    skillC += realtime / 1000 ;

    skillD += realtime / 1000 ;

    skillE += realtime / 1000 ;

    skillF += realtime / 1000 ;
    //skillF = skillF+realtime/1000;
    skillG += realtime / 1000 ;

    skillH += realtime / 1000 ;

    skillI += realtime / 1000 ;

    skillJ += realtime / 1000 ;
  }

}


void skillAll() {
  timecheck();
  combo_assault();
}

void skillAll_1() {
  timecheck();
  tempest();
  resonance();
  sinmi();
  solra();
  mistel();
  evolution();
}

void skillAll_2() {
  timecheck();
  erdashawer();
}

void skillAll_3() {
  timecheck();
  raven();
}

void skillAll_5() {
  timecheck();
  ultimate_blast();
}

void combo_assault() {

  if (skillA >= random(8, 10)) {

    delay (random(20, 45));
    Keyboard.press(0xD5);
    delay (random(45, 70));
    Keyboard.release(0xD5);
    delay (random(600, 650));

    skillA = 0;
  }
}

void tempest() {

  if (skillC >= random(121, 125)) {

    delay (random(70, 90));
    Keyboard.press(0xD6);
    delay (random(45, 70));
    Keyboard.release(0xD6);
    delay (random(700, 800));

    skillC = 0;

  }
}

void erdashawer() {

  if (skillB >= random(53, 59)) {

    delay (random(60, 80));
    Keyboard.press(0xD9);
    delay (random(20, 45));
    Keyboard.press(0xD4);
    delay (random(45, 70));
    Keyboard.release(0xD4);
    delay (random(20, 45));
    Keyboard.release(0xD9);
    delay (random(750, 800));

    skillB = 0;

  }
}


void sinmi() {

  if (skillD >= random(245, 255)) {

    delay (random(30, 60));
    Keyboard.press(0xD2);
    delay (random(45, 70));
    Keyboard.release(0xD2);
    delay (random(800, 900));

    skillD = 0;

  }
}

void solra() {

  if (skillE >= random(245, 260)) {

    delay (random(30, 60));
    Keyboard.press(0xD3);
    delay (random(45, 70));
    Keyboard.release(0xD3);
    delay (random(800, 900));

    skillE = 0;

  }
}

void mistel() {

  if (skillG >= random(8, 30)) {

    delay (random(20, 45));
    Keyboard.press(0xD1);
    delay (random(45, 70));
    Keyboard.release(0xD1);
    delay (random(500, 550));

    skillG = 0;

  }
}

void resonance() {

  if (skillF >= random(8, 30)) {

    delay (random(20, 45));
    Keyboard.press('a');
    delay (random(45, 70));
    Keyboard.release('a');
    delay (random(30, 60));

    skillF = 0;

  }
}

void raven() {

  if (skillI >= random(100, 180)) {

    delay (random(20, 45));
    Keyboard.press(0xC2);
    delay (random(45, 70));
    Keyboard.release(0xC2);
    delay (random(550, 650));

    skillI = 0;

  }
}

void evolution() {

  if (skillJ >= random(115, 135)) {

    delay (random(20, 45));
    Keyboard.press(0xC3);
    delay (random(45, 70));
    Keyboard.release(0xC3);
    delay (random(30, 60));

    skillJ = 0;

  }
}

void ultimate_blast() {

  if (skillH >= random(121, 125)) {

    delay (random(30, 60));
    Keyboard.press('q');
    delay (random(45, 70));
    Keyboard.release('q');
    delay (random(1300, 1400));

    skillH = 0;

  }
}



void left() {

  delay(random(45, 70));
  Keyboard.press(0xD8);
  delay(random(45, 70));
  Keyboard.release(0xD8);
  delay(random(45, 70));

}


void right() {

  delay(random(20, 45));
  Keyboard.press(0xD7);
  delay(random(45, 70));
  Keyboard.release(0xD7);
  delay(random(45, 70));

}
void up_transition() {

  delay(random(45, 70));
  Keyboard.press(0xDA);
  delay(random(45, 70));

  delay(random(45, 70));
  Keyboard.press(0x81);
  delay(random(45, 70));
  Keyboard.release(0x81);
  delay(random(45, 70));

  delay(random(45, 70));
  Keyboard.release(0xDA);
  delay(random(45, 70));

}



void attack() {

  int X = random(1, 7);

  if (X == 1) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 2) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 3) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 4) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 5) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 6) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }


}

void jumpattack() {

  int X = random(1, 7);

  if (X == 1) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(160, 180));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 2) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(160, 180));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 3) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(160, 180));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 4) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(160, 180));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 5) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(160, 180));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 6) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(160, 180));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }


}

void jumpattack_1() {

  int X = random(1, 7);

  if (X == 1) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(130, 160));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 2) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(130, 160));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 3) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(130, 160));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 4) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(130, 160));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 5) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(130, 160));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 6) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(130, 160));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }


}

void jumpattack_2() {

  int X = random(1, 7);

  if (X == 1) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(20, 45));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 2) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(20, 45));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 3) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(20, 45));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 4) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(20, 45));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 5) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(20, 45));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 6) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(20, 45));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
}

void jumpattack_3() {

  int X = random(1, 7);

  if (X == 1) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(200, 250));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 2) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(200, 250));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 3) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(200, 250));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 4) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(200, 250));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 5) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(200, 250));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }
  else if (X == 6) {
    attack_key = key[random(6)];
    delay(random(20, 40));
    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(200, 250));

    Keyboard.press(0x82);
    delay(random(45, 70));
    Keyboard.release(0x82);
    delay(random(30, 60));

    Keyboard.press(attack_key);
    delay(random(45, 70));
    Keyboard.release(attack_key);
    delay(random(delay1_1, delay1_2));
  }


}